<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="800" height="600">

	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	<fx:Declarations />

	<fx:Script>
		<![CDATA[
			import com.as3nui.nativeExtensions.air.kinect.Kinect;
			import com.as3nui.nativeExtensions.air.kinect.KinectSettings;
			import com.as3nui.nativeExtensions.air.kinect.constants.CameraResolution;
			import com.as3nui.nativeExtensions.air.kinect.constants.DeviceState;
			import com.as3nui.nativeExtensions.air.kinect.data.SkeletonJoint;
			import com.as3nui.nativeExtensions.air.kinect.data.User;
			import com.as3nui.nativeExtensions.air.kinect.events.CameraImageEvent;
			import com.as3nui.nativeExtensions.air.kinect.events.DeviceEvent;
			import com.as3nui.nativeExtensions.air.kinect.events.PointCloudEvent;

			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;

			[Bindable]
			private var cmrRsltnDp:ArrayCollection = new ArrayCollection(
				[   {label:"160x120", value:CameraResolution.RESOLUTION_160_120},
					{label:"320x240", value:CameraResolution.RESOLUTION_320_240},
					{label:"640x480", value:CameraResolution.RESOLUTION_640_480}
				]
			);

			private static var _renderer:PointCloudRenderer;

			private var _settings:KinectSettings = null;

			private function button1_clickHandler(event:MouseEvent):void
			{
				if (!Kinect.isSupported()) {
					return;
				}
				_settings = new KinectSettings();

				btnStart.enabled = false;
				// Kinectセンサー取得
				var kinect:Kinect = Kinect.getDevice();
				kinect.addEventListener(DeviceEvent.STARTED, startHandler);
				kinect.addEventListener(DeviceEvent.STOPPED, stopHandler);

				// PointCloud設定
				settingPC();

				// Kinect開始
				kinect.start(_settings);

				if (!_renderer){
					_renderer = new PointCloudRenderer(_settings);
				} else {
					_renderer.init(_settings);
				}
				if (!rendererStage.contains(_renderer)) {
					rendererStage.addChild(_renderer);
				}
			}

			private function startHandler(event:DeviceEvent):void {
				btnStop.enabled = true;
				FlexGlobals.topLevelApplication.useAngle();
			}

			private function stopHandler(event:DeviceEvent):void {
				btnStart.enabled = true;
				Kinect.getDevice().removeEventListener(DeviceEvent.STOPPED, stopHandler);
				FlexGlobals.topLevelApplication.useAngle(false);
			}

			private function settingPC():void {

				// ポイントクラウド更新イベントを追加
				Kinect.getDevice().addEventListener(PointCloudEvent.POINT_CLOUD_UPDATE,
					pcUpdateHandler);
				// ポイントクラウドミラーモード
				_settings.pointCloudMirrored = chkBxPcMr.selected;
				// ポイントクラウドカラーモード
				_settings.pointCloudIncludeRGB = chkBxPcColor.selected;
				// ポイントクラウド
				_settings.pointCloudEnabled = true;
				// ポイントクラウド解像度
				_settings.pointCloudResolution = cmbBxPc.selectedItem.value as Point;
				_settings.depthEnableNearMode = true;
			}

			private function stop():void {
				btnStop.enabled = false;
				var kinect:Kinect = Kinect.getDevice();
				kinect.removeEventListener(DeviceEvent.STARTED, startHandler);
				kinect.removeEventListener(PointCloudEvent.POINT_CLOUD_UPDATE,
					pcUpdateHandler);
				kinect.stop();
			}

			private function pcUpdateHandler(event:PointCloudEvent):void {
				pcUpdate(event.pointCloudData);
			}

			private function pcUpdate(pcData:ByteArray):void {
				_renderer.updatePoints(pcData);
			}
		]]>
	</fx:Script>

	<s:HGroup paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6">
		<s:VGroup>
			<s:Group id="grpPC" width="640" height="480">
				<mx:UIComponent id="rendererStage" />
			</s:Group>
			<s:HGroup paddingLeft="6" paddingRight="6">
				<s:Label height="23" text="ポイントクラウド" verticalAlign="middle"/>
				<s:CheckBox id="chkBxPcColor" label="カラーモード"/>
				<s:CheckBox id="chkBxPcMr" label="ミラーモード"/>
				<s:ComboBox id="cmbBxPc" dataProvider="{cmrRsltnDp}" selectedIndex="0"/>
			</s:HGroup>
		</s:VGroup>
	</s:HGroup>

	<s:HGroup>
		<s:Button id="btnStart" width="90" height="50" label="開始" fontSize="24" click="button1_clickHandler(event)"/>
		<s:Button id="btnStop" width="90" height="50" label="終了" fontSize="24" click="stop()" enabled="false"/>
	</s:HGroup>
</s:Group>
